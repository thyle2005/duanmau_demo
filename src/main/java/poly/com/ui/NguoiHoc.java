package poly.com.ui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class NguoiHoc extends javax.swing.JDialog {

    /**
     * Creates new form NguoiHocJDialog
     */
    public NguoiHoc() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtMaNH = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNgaySinh = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        txtHoTen = new javax.swing.JTextField();
        txtDienThoai = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnTimKiem = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý người học");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setText("Họ và tên");

        jLabel3.setText("Điện thoại");

        jLabel4.setText("Giới tính");

        jLabel1.setText("Mã người học");

        jLabel6.setText("Địa chỉ email");

        jLabel7.setText("Ngày sinh");

        jLabel8.setText("Ghi chú");

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        jScrollPane2.setViewportView(txtGhiChu);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        rdoNam.setSelected(true);
        rdoNam.setText("Nam");
        rdoNam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNamActionPerformed(evt);
            }
        });
        jPanel4.add(rdoNam);

        rdoNu.setText("Nữ");
        rdoNu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoNuActionPerformed(evt);
            }
        });
        jPanel4.add(rdoNu);

        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel5.add(btnFirst);

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        jPanel5.add(btnPrev);

        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel5.add(btnNext);

        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel5.add(btnLast);

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel6.add(btnThem);

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel6.add(btnSua);

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel6.add(btnXoa);

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        jPanel6.add(btnMoi);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaNH)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(txtDienThoai, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtNgaySinh)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(txtHoTen)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaNH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabs.addTab("CẬP NHẬT", jPanel1);

        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ NH", "HỌ VÀ TÊN", "GIỚI TÍNH", "NGÀY SINH", "ĐIỆN THOẠI", "EMAIL", "MA NV", "NGÀY ĐK"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNguoiHoc.setRowHeight(25);
        tblNguoiHoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoiHocMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNguoiHoc);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("TÌM KIẾM"));

        btnTimKiem.setText("Tìm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTimKiem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimKiem)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnTimKiem)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("DANH SÁCH", jPanel2);

        tabs.setSelectedIndex(1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("QUẢN LÝ NGƯỜI HỌC");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        VeDau();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        VeTruoc();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        VeSau();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        VeCuoi();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        Luu();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        CapNhat();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        xoa();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void tblNguoiHocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoiHocMouseClicked
        showDetails();
    }//GEN-LAST:event_tblNguoiHocMouseClicked

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String hoTen = txtTimKiem.getText();

    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadDataToTable();
        VeDau();
    }//GEN-LAST:event_formWindowOpened

    private void rdoNamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNamActionPerformed
        rdoNu.setSelected(false);

    }//GEN-LAST:event_rdoNamActionPerformed

    private void rdoNuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoNuActionPerformed
        rdoNam.setSelected(false);
    }//GEN-LAST:event_rdoNuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NguoiHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NguoiHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NguoiHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NguoiHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NguoiHoc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblNguoiHoc;
    private javax.swing.JTextField txtDienThoai;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaNH;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
    private static String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private static String url = "jdbc:sqlserver://localhost;databaseName=EduSys;encrypt=true;trustServerCertificate=true";
    private static String user = "sa";
    private static String password = "tranduynin";
    private int selectedRow = -1;
    /**
     * Kết nối dữ liệu lên bảng:
     * @dev: @TranDuyNin
     * @date: 8/6/2024
     */
    private void loadDataToTable() {
        try {
            // Tạo kết nối
            Connection connection = DriverManager.getConnection(url, user, password);

            // Chuẩn bị câu truy vấn
            String query = "SELECT MaNH, HoTen, GioiTinh, NgaySinh, DienThoai, Email, GhiChu,  MaNV, NgayDK FROM NGUOIHOC";
            PreparedStatement statement = connection.prepareStatement(query);

            // Thực hiện câu truy vấn và nhận kết quả
            ResultSet resultSet = statement.executeQuery();

            // Lấy mô hình của bảng
            DefaultTableModel tableModel = (DefaultTableModel) tblNguoiHoc.getModel();

            // Xóa dữ liệu cũ trong bảng
            tableModel.setRowCount(0);

            // Duyệt qua kết quả và thêm vào mô hình bảng
            while (resultSet.next()) {
                String maNH = resultSet.getString("MaNH");
                String hoTen = resultSet.getString("HoTen");
                String gioiTinh = resultSet.getString("GioiTinh");
                String ngaySinh = resultSet.getString("NgaySinh");
                String dienThoai = resultSet.getString("DienThoai");
                String email = resultSet.getString("Email");
                String ghiChu = resultSet.getString("GhiChu");
                String maNV = resultSet.getString("MaNV");
                String ngayDK = resultSet.getString("NgayDK");
                // Thêm vào mô hình bảng
                tableModel.addRow(new Object[]{maNH, hoTen, gioiTinh, ngaySinh, dienThoai, email, maNV, ngayDK});
            }

            // Đóng các tài nguyên
            resultSet.close();
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(NguoiHoc.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showDetails() {
        int selectedRowIndex = tblNguoiHoc.getSelectedRow();

        if (selectedRowIndex != -1) {
            String maNH = tblNguoiHoc.getValueAt(selectedRowIndex, 0).toString(); // Assuming MaNH is at index 0

            try {
                // Connect to the database
                Connection connection = DriverManager.getConnection(url, user, password);

                // Prepare the query to fetch all fields from the database
                String query = "SELECT HoTen, GioiTinh, NgaySinh, DienThoai, Email, GhiChu FROM NGUOIHOC WHERE MaNH = ?";
                PreparedStatement statement = connection.prepareStatement(query);
                statement.setString(1, maNH);

                // Execute the query
                ResultSet resultSet = statement.executeQuery();

                // Check if a record is found
                if (resultSet.next()) {
                    String hoTen = resultSet.getString("HoTen");
                    boolean gioiTinh = resultSet.getBoolean("GioiTinh");
                    String ngaySinh = resultSet.getString("NgaySinh");
                    String dienThoai = resultSet.getString("DienThoai");
                    String email = resultSet.getString("Email");

                    // Set data to the form fields
                    txtMaNH.setText(maNH);
                    txtHoTen.setText(hoTen);

                    // Set the gender radio buttons
                    rdoNam.setSelected(gioiTinh);
                    rdoNu.setSelected(!gioiTinh);

                    txtNgaySinh.setText(ngaySinh);
                    txtDienThoai.setText(dienThoai);
                    txtEmail.setText(email);

                    // Set the retrieved "GhiChu" directly from the database
                    txtGhiChu.setText(resultSet.getString("GhiChu"));

                    // Switch to the first tab
                    tabs.setSelectedIndex(0);
                }

                // Close resources
                resultSet.close();
                statement.close();
                connection.close();
            } catch (SQLException ex) {
                Logger.getLogger(NguoiHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clear() {
        txtMaNH.setText("");
        txtHoTen.setText("");
        rdoNam.setSelected(true);
        rdoNu.setSelected(false);
        txtNgaySinh.setText("");
        txtDienThoai.setText("");
        txtEmail.setText("");
        txtGhiChu.setText("");
    }

    private void VeSau() {
        if (selectedRow < tblNguoiHoc.getRowCount() - 1) {
            selectedRow++;
            tblNguoiHoc.setRowSelectionInterval(selectedRow, selectedRow);
            tblNguoiHoc.scrollRectToVisible(tblNguoiHoc.getCellRect(selectedRow, 0, true));
            showDetails();
        } else {
            JOptionPane.showMessageDialog(this, "Đã ở cuối danh sách!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void VeTruoc() {
        if (selectedRow > 0) {
            selectedRow--;
            tblNguoiHoc.setRowSelectionInterval(selectedRow, selectedRow);
            tblNguoiHoc.scrollRectToVisible(tblNguoiHoc.getCellRect(selectedRow, 0, true));
            showDetails();
        } else {
            JOptionPane.showMessageDialog(this, "Đã ở đầu danh sách!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void VeDau() {
        if (tblNguoiHoc.getRowCount() > 0) {
            selectedRow = 0;
            tblNguoiHoc.setRowSelectionInterval(selectedRow, selectedRow);
            tblNguoiHoc.scrollRectToVisible(tblNguoiHoc.getCellRect(selectedRow, 0, true));
            showDetails();
        } else {
            JOptionPane.showMessageDialog(this, "Danh sách trống!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void VeCuoi() {
        if (tblNguoiHoc.getRowCount() > 0) {
            selectedRow = tblNguoiHoc.getRowCount() - 1;
            tblNguoiHoc.setRowSelectionInterval(selectedRow, selectedRow);
            tblNguoiHoc.scrollRectToVisible(tblNguoiHoc.getCellRect(selectedRow, 0, true));
            showDetails();
        } else {
            JOptionPane.showMessageDialog(this, "Danh sách trống!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void Luu() {
        try {
            // Kết nối đến cơ sở dữ liệu
            Connection connection = DriverManager.getConnection(url, user, password);

            // Chuẩn bị câu truy vấn để chèn dữ liệu vào bảng NGUOIHOC
            String insertQuery = "INSERT INTO NGUOIHOC (MaNH, HoTen, NgaySinh, GioiTinh, DienThoai, Email, GhiChu, MaNV, NgayDK) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement insertStatement = connection.prepareStatement(insertQuery);

            // Lấy dữ liệu từ các trường trên form
            String maNH = txtMaNH.getText();
            String hoTen = txtHoTen.getText();
            String ngaySinh = txtNgaySinh.getText(); // Bạn có thể kiểm tra và chuyển đổi thành Date
            boolean gioiTinh = rdoNam.isSelected();
            String dienThoai = txtDienThoai.getText();
            String email = txtEmail.getText();
            String ghiChu = txtGhiChu.getText();
            String maNV = DangNhap.AuthenticationManager.getLoggedInUser(); // Đặt MaNV là người dùng đang đăng nhập
            java.util.Date currentDate = new java.util.Date();
            java.sql.Date ngayDK = new java.sql.Date(currentDate.getTime()); // Đặt NgayDK là ngày hiện tại

            // Đặt các tham số cho câu lệnh chèn
            insertStatement.setString(1, maNH);
            insertStatement.setString(2, hoTen);
            insertStatement.setString(3, ngaySinh);
            insertStatement.setBoolean(4, gioiTinh);
            insertStatement.setString(5, dienThoai);
            insertStatement.setString(6, email);
            insertStatement.setString(7, ghiChu);
            insertStatement.setString(8, maNV);
            insertStatement.setDate(9, ngayDK);

            // Thực hiện câu truy vấn chèn
            insertStatement.executeUpdate();

            // Đóng tài nguyên
            insertStatement.close();
            connection.close();

            // Nạp lại dữ liệu để cập nhật bảng
            loadDataToTable();

            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Thêm người học thành công!");

            // Xóa trắng các trường trên form
            clear();
        } catch (SQLException ex) {
            Logger.getLogger(NguoiHoc.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Thêm người học thất bại. Chi tiết lỗi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void CapNhat() {
        try {
            // Kết nối đến cơ sở dữ liệu
            Connection connection = DriverManager.getConnection(url, user, password);

            // Chuẩn bị câu truy vấn để cập nhật dữ liệu trong bảng NGUOIHOC
            String updateQuery = "UPDATE NGUOIHOC SET HoTen=?, NgaySinh=?, GioiTinh=?, DienThoai=?, Email=?, GhiChu=? WHERE MaNH=?";
            PreparedStatement updateStatement = connection.prepareStatement(updateQuery);

            // Lấy dữ liệu từ các trường trên form
            String hoTen = txtHoTen.getText();
            String ngaySinh = txtNgaySinh.getText(); // Bạn có thể kiểm tra và chuyển đổi thành Date
            boolean gioiTinh = rdoNam.isSelected();
            String dienThoai = txtDienThoai.getText();
            String email = txtEmail.getText();
            String ghiChu = txtGhiChu.getText();
            String maNH = txtMaNH.getText();

            // Đặt các tham số cho câu lệnh cập nhật
            updateStatement.setString(1, hoTen);
            updateStatement.setString(2, ngaySinh);
            updateStatement.setBoolean(3, gioiTinh);
            updateStatement.setString(4, dienThoai);
            updateStatement.setString(5, email);
            updateStatement.setString(6, ghiChu);
            updateStatement.setString(7, maNH);

            // Thực hiện câu truy vấn cập nhật
            int rowsAffected = updateStatement.executeUpdate();

            // Đóng tài nguyên
            updateStatement.close();
            connection.close();

            // Kiểm tra xem có dòng nào bị ảnh hưởng không
            if (rowsAffected > 0) {
                // Nếu có, thông báo cập nhật thành công
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin người học thành công!");

                // Nạp lại dữ liệu để cập nhật bảng
                loadDataToTable();

                // Xóa trắng các trường trên form
                clear();
            } else {
                // Nếu không có dòng nào bị ảnh hưởng, thông báo cập nhật thất bại
                JOptionPane.showMessageDialog(this, "Cập nhật thất bại. Không tìm thấy người học có mã " + maNH, "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {

        }
    }

    private void xoa() {
        try {
            // Lấy mã người học từ trường mã người học trên form
            String maNH = txtMaNH.getText();

            // Hiển thị hộp thoại xác nhận
            int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa người học có mã " + maNH + " không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

            // Nếu người dùng chọn "Yes" (Đồng ý), thì thực hiện xóa
            if (choice == JOptionPane.YES_OPTION) {
                // Kết nối đến cơ sở dữ liệu
                Connection connection = DriverManager.getConnection(url, user, password);

                // Chuẩn bị câu truy vấn để xóa dữ liệu từ bảng NGUOIHOC
                String deleteQuery = "DELETE FROM NGUOIHOC WHERE MaNH=?";
                PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery);

                // Đặt tham số cho câu lệnh xóa
                deleteStatement.setString(1, maNH);

                // Thực hiện câu truy vấn xóa
                int rowsAffected = deleteStatement.executeUpdate();

                // Đóng tài nguyên
                deleteStatement.close();
                connection.close();

                // Kiểm tra xem có dòng nào bị ảnh hưởng không
                if (rowsAffected > 0) {
                    // Nếu có, thông báo xóa thành công
                    JOptionPane.showMessageDialog(this, "Xóa người học thành công!");

                    // Nạp lại dữ liệu để cập nhật bảng
                    loadDataToTable();

                    // Xóa trắng các trường trên form
                    clear();
                } else {
                    // Nếu không có dòng nào bị ảnh hưởng, thông báo xóa thất bại
                    JOptionPane.showMessageDialog(this, "Xóa thất bại. Không tìm thấy người học có mã " + maNH, "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(NguoiHoc.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Xóa thất bại. Chi tiết lỗi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poly.com.ui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Admin
 */
public class HocVien extends javax.swing.JDialog {

    /**
     * Creates new form HocVienJDialog
     */
    public HocVien() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        cboChuyenDe = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        cboKhoaHoc = new javax.swing.JComboBox<>();
        tabs = new javax.swing.JTabbedPane();
        pnlHocVien = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHocVien = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnRemoveHocVien = new javax.swing.JButton();
        btnUpdateDiem = new javax.swing.JButton();
        pnlNguoiHoc = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNguoiHoc = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnAddHocVien = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý học viên");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("CHUYÊN ĐỀ"));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        cboChuyenDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChuyenDeActionPerformed(evt);
            }
        });
        jPanel5.add(cboChuyenDe);

        jPanel1.add(jPanel5);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("KHÓA HỌC"));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        cboKhoaHoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKhoaHocActionPerformed(evt);
            }
        });
        jPanel2.add(cboKhoaHoc);

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pnlHocVien.setLayout(new java.awt.BorderLayout());

        tblHocVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "TT", "MÃ HV", "MÃ NH", "HỌ TÊN", "ĐIỂM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHocVien.setRowHeight(25);
        tblHocVien.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(tblHocVien);

        pnlHocVien.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnRemoveHocVien.setText("Xóa khỏi khóa học");
        btnRemoveHocVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveHocVienActionPerformed(evt);
            }
        });
        jPanel4.add(btnRemoveHocVien);

        btnUpdateDiem.setText("Cập nhật điểm");
        btnUpdateDiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDiemActionPerformed(evt);
            }
        });
        jPanel4.add(btnUpdateDiem);

        pnlHocVien.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        tabs.addTab("HỌC VIÊN", pnlHocVien);

        pnlNguoiHoc.setLayout(new java.awt.BorderLayout());

        tblNguoiHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ NH", "HỌ VÀ TÊN", "GIỚI TÍNH", "NGÀY SINH", "ĐIỆN THOẠI", "EMAIL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNguoiHoc.setRowHeight(22);
        tblNguoiHoc.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane3.setViewportView(tblNguoiHoc);

        pnlNguoiHoc.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        btnAddHocVien.setText("Thêm vào khóa học");
        btnAddHocVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHocVienActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddHocVien);

        pnlNguoiHoc.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });
        jPanel6.add(txtTimKiem);

        pnlNguoiHoc.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        tabs.addTab("NGƯỜI HỌC", pnlNguoiHoc);

        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboChuyenDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChuyenDeActionPerformed

    }//GEN-LAST:event_cboChuyenDeActionPerformed

    private void cboKhoaHocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKhoaHocActionPerformed
        String selectedMaKH = (String) cboKhoaHoc.getSelectedItem();
        if ("Tất cả".equals(selectedMaKH)) {
            cboKhoaHoc.removeAllItems();
            cboKhoaHoc.addItem("Tất cả");
            loadDataToTable();
        } else {
            loadDataHocVien(selectedMaKH);
        }
    }//GEN-LAST:event_cboKhoaHocActionPerformed

    private void btnRemoveHocVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveHocVienActionPerformed
        int selectedRow = tblHocVien.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một học viên để xóa khỏi khóa học.",
                    "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Get the values from the selected row
        String maHocVien = tblHocVien.getValueAt(selectedRow, 1).toString();
        String maNguoiHoc = tblHocVien.getValueAt(selectedRow, 2).toString();
        String tenHocVien = tblHocVien.getValueAt(selectedRow, 3).toString();

        // Confirm with the user before removing from the course
        int option = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc muốn xóa học viên " + tenHocVien + " khỏi khóa học?",
                "Xác nhận xóa khỏi khóa học", JOptionPane.YES_NO_OPTION);

        // Check if the user confirmed the deletion
        if (option == JOptionPane.YES_OPTION) {
            // Remove the student from the course in the database
            removeHocVienFromCourse(maHocVien);
            // Reload the data in the table
            loadDataToTable();
        }
    }//GEN-LAST:event_btnRemoveHocVienActionPerformed

    private void btnUpdateDiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDiemActionPerformed
        int selectedRow = tblHocVien.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một học viên để cập nhật điểm.",
                    "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Get the values from the selected row
        String maHocVien = tblHocVien.getValueAt(selectedRow, 1).toString();
        String maNguoiHoc = tblHocVien.getValueAt(selectedRow, 2).toString();
        String tenHocVien = tblHocVien.getValueAt(selectedRow, 3).toString();
        String diemString = tblHocVien.getValueAt(selectedRow, 4).toString();

        // Prompt the user for the new score
        String newDiemString = JOptionPane.showInputDialog(this, "Nhập điểm mới cho học viên " + tenHocVien + ":",
                "Cập nhật điểm", JOptionPane.QUESTION_MESSAGE);

        // Check if the user canceled or entered an empty string
        if (newDiemString == null || newDiemString.trim().isEmpty()) {
            return; // No action if the user cancels or leaves the field empty
        }

        // Parse the new score to double
        double newDiem;
        try {
            newDiem = Double.parseDouble(newDiemString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập một số hợp lệ.",
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the score in the database
        updateDiem(maHocVien, newDiem);

        // Reload the data in the table
        loadDataToTable();
    }//GEN-LAST:event_btnUpdateDiemActionPerformed

    private void btnAddHocVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHocVienActionPerformed

    }//GEN-LAST:event_btnAddHocVienActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased

    }//GEN-LAST:event_txtTimKiemKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadChuyenDeToComboBox();
        loadDataToTable();
        loadDataToJTable1();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HocVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HocVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HocVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HocVien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HocVien().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddHocVien;
    private javax.swing.JButton btnRemoveHocVien;
    private javax.swing.JButton btnUpdateDiem;
    private javax.swing.JComboBox<String> cboChuyenDe;
    private javax.swing.JComboBox<String> cboKhoaHoc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlHocVien;
    private javax.swing.JPanel pnlNguoiHoc;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblHocVien;
    private javax.swing.JTable tblNguoiHoc;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    private static String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private static String url = "jdbc:sqlserver://localhost;databaseName=EduSys;encrypt=true;trustServerCertificate=true";
    private static String user = "sa";
    private static String password = "tranduynin";
    private int selectedRow = -1;
    private List<String> chuyenDeList = new ArrayList<>();
    
    
    

    private void loadDataHocVien(String maKH) {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "SELECT "
                    + "ROW_NUMBER() OVER (ORDER BY MaHV) AS STT, "
                    + "MaHV AS 'Mã Học Viên', "
                    + "HOCVIEN.MaNH AS 'Mã Người Học', "
                    + "(SELECT HoTen FROM NGUOIHOC WHERE MaNH = HOCVIEN.MaNH) AS 'Họ và Tên', "
                    + "Diem AS 'Điểm' "
                    + "FROM HOCVIEN "
                    + "WHERE MaKH = ?"; // Thêm điều kiện lọc theo khóa học

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, maKH);
                try (ResultSet rs = stmt.executeQuery()) {
                    DefaultTableModel model = new DefaultTableModel();
                    model.addColumn("STT");
                    model.addColumn("Mã Học Viên");
                    model.addColumn("Mã Người Học");
                    model.addColumn("Họ và Tên");
                    model.addColumn("Điểm");

                    while (rs.next()) {
                        Object[] row = {
                            rs.getInt("STT"),
                            rs.getString("Mã Học Viên"),
                            rs.getString("Mã Người Học"),
                            rs.getString("Họ và Tên"),
                            rs.getDouble("Điểm")
                        };
                        model.addRow(row);
                    }

                    tblHocVien.setModel(model);
                }
            }
        } catch (SQLException ex) {
            // Xử lý exception
        }
    }

    private void loadDataToTable() {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "SELECT "
                    + "ROW_NUMBER() OVER (ORDER BY MaHV) AS STT, "
                    + "MaHV AS 'Mã Học Viên', "
                    + "HOCVIEN.MaNH AS 'Mã Người Học', "
                    + "(SELECT HoTen FROM NGUOIHOC WHERE MaNH = HOCVIEN.MaNH) AS 'Họ và Tên', "
                    + "Diem AS 'Điểm' "
                    + "FROM HOCVIEN";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                try (ResultSet rs = stmt.executeQuery()) {
                    DefaultTableModel model = new DefaultTableModel();
                    model.addColumn("STT");
                    model.addColumn("Mã Học Viên");
                    model.addColumn("Mã Người Học");
                    model.addColumn("Họ và Tên");
                    model.addColumn("Điểm");

                    while (rs.next()) {
                        Object[] row = {
                            rs.getInt("STT"),
                            rs.getString("Mã Học Viên"),
                            rs.getString("Mã Người Học"),
                            rs.getString("Họ và Tên"),
                            rs.getDouble("Điểm")
                        };
                        model.addRow(row);
                    }

                    tblHocVien.setModel(model);
                }
            }
            String queryKhoaHoc = "SELECT * FROM KHOAHOC";
            try (PreparedStatement stmtKhoaHoc = conn.prepareStatement(queryKhoaHoc)) {
                try (ResultSet rsKhoaHoc = stmtKhoaHoc.executeQuery()) {
                    while (rsKhoaHoc.next()) {
                        cboKhoaHoc.addItem(rsKhoaHoc.getString("MaKH"));
                    }
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(HocVien.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ cơ sở dữ liệu", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadChuyenDeToComboBox() {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "SELECT MaCD, TenCD FROM CHUYENDE";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                try (ResultSet rs = stmt.executeQuery()) {
                    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
                    model.addElement("Tất cả");

                    while (rs.next()) {
                        String maCD = rs.getString("MaCD");
                        String tenCD = rs.getString("TenCD");
                        chuyenDeList.add(maCD);

                        model.addElement(tenCD);
                    }

                    cboChuyenDe.setModel(model);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HocVien.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ cơ sở dữ liệu", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDataToJTable1() {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "SELECT MaNH, HoTen, GioiTinh, NgaySinh, DienThoai, Email FROM NGUOIHOC";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                try (ResultSet rs = stmt.executeQuery()) {
                    DefaultTableModel model = new DefaultTableModel();
                    model.addColumn("Mã Người Học");
                    model.addColumn("Họ và Tên");
                    model.addColumn("Giới Tính");
                    model.addColumn("Ngày Sinh");
                    model.addColumn("Số Điện Thoại");
                    model.addColumn("Email");

                    while (rs.next()) {
                        Object[] row = {
                            rs.getString("MaNH"),
                            rs.getString("HoTen"),
                            rs.getString("GioiTinh"),
                            rs.getString("NgaySinh"),
                            rs.getString("DienThoai"),
                            rs.getString("Email")
                        };
                        model.addRow(row);
                    }

                    tblNguoiHoc.setModel(model);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HocVien.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ cơ sở dữ liệu", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateDiem(String maHocVien, double newDiem) {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "UPDATE HOCVIEN SET Diem = ? WHERE MaHV = ?";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setDouble(1, newDiem);
                stmt.setString(2, maHocVien);

                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Cập nhật điểm thành công.",
                            "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Cập nhật điểm thất bại.",
                            "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HocVien.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật điểm vào cơ sở dữ liệu.",
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeHocVienFromCourse(String maHocVien) {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {
            String query = "DELETE FROM HOCVIEN WHERE MaHV = ?";

            try (PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, maHocVien);

                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Xóa học viên khỏi khóa học thành công.",
                            "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa học viên khỏi khóa học thất bại.",
                            "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HocVien.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa học viên khỏi khóa học từ cơ sở dữ liệu.",
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poly.com.ui;

import java.awt.Image;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ChuyenDe extends javax.swing.JDialog {

    String strHinhanh = null;

    /**
     * Creates new form ChuyenDeJDialog
     */
    public ChuyenDe() {

        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLabel5 = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnMoi = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtTenCD = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtThoiLuong = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtMaCD = new javax.swing.JTextField();
        txtHocPhi = new javax.swing.JTextField();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        lblHinh = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMota = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblChuyenDe = new javax.swing.JTable();
        tblHocPhiMax = new javax.swing.JButton();
        tblHocPhiMin = new javax.swing.JButton();

        fileChooser.setDialogTitle("Chọn logo chuyên đề");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý chuyên đề");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("QUẢN LÝ CHUYÊN ĐỀ");

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        jLabel2.setText("Tên chuyên đề");

        jLabel3.setText("Thời lượng (giờ)");

        jLabel4.setText("Học phí");

        jLabel1.setText("Mã chuyên đề");

        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        lblHinh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHinh.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 1, true));
        lblHinh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblHinh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhMouseClicked(evt);
            }
        });

        txtMota.setColumns(20);
        txtMota.setRows(5);
        jScrollPane2.setViewportView(txtMota);

        jLabel7.setText("Mô tả chuyên đề");

        jLabel6.setText("Hình logo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMoi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(btnFirst)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPrev)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLast))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHinh, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTenCD, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtThoiLuong, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtHocPhi, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtMaCD, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtMaCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTenCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHocPhi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblHinh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMoi)
                    .addComponent(btnXoa)
                    .addComponent(btnSua)
                    .addComponent(btnThem)
                    .addComponent(btnLast)
                    .addComponent(btnNext)
                    .addComponent(btnPrev)
                    .addComponent(btnFirst))
                .addContainerGap())
        );

        tabs.addTab("CẬP NHẬT", jPanel1);

        tblChuyenDe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ CD", "TÊN CD", "HỌC PHÍ", "THỜI LƯỢNG", "HÌNH"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChuyenDe.setGridColor(new java.awt.Color(255, 0, 0));
        tblChuyenDe.setRowHeight(25);
        tblChuyenDe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChuyenDeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblChuyenDe);

        tblHocPhiMax.setText("Học phí tăng dần");
        tblHocPhiMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tblHocPhiMaxActionPerformed(evt);
            }
        });

        tblHocPhiMin.setText("Học phí giảm dần");
        tblHocPhiMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tblHocPhiMinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tblHocPhiMax)
                .addGap(18, 18, 18)
                .addComponent(tblHocPhiMin)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tblHocPhiMax)
                    .addComponent(tblHocPhiMin)))
        );

        tabs.addTab("DANH SÁCH", jPanel2);

        tabs.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        Them();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        LastRow();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        NextRow();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        PreviousRow();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        Frist();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void lblHinhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhMouseClicked
        String imagePath = "D:\\FPT polytechnic\\Anh Code\\chuc nang";
        JFileChooser fileChooser = new JFileChooser(new File(imagePath));
        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            strHinhanh = selectedFile.getName(); // Chỉ lưu tên file

            // Tạo đường dẫn đầy đủ bằng cách kết hợp thư mục và tên file
            String fullImagePath = imagePath + strHinhanh;

            ImageIcon originalIcon = new ImageIcon(fullImagePath);
            Image originalImage = originalIcon.getImage();

            // Kích thước cố định cho hình ảnh
            int fixedWidth = 150;
            int fixedHeight = 150;

            // Định kích thước mới của hình ảnh để cố định kích thước
            Image scaledImage = originalImage.getScaledInstance(fixedWidth, fixedHeight, Image.SCALE_SMOOTH);

            ImageIcon scaledIcon = new ImageIcon(scaledImage);

            lblHinh.setIcon(scaledIcon);
            lblHinh.setText(null);

            lblHinh.setHorizontalAlignment(SwingConstants.CENTER);
            lblHinh.setVerticalAlignment(SwingConstants.CENTER);
        }
    }//GEN-LAST:event_lblHinhMouseClicked

    private void tblChuyenDeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChuyenDeMouseClicked
        showDetails();
        tabs.setSelectedIndex(0);
    }//GEN-LAST:event_tblChuyenDeMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadDataIntoTable();
        Frist();
    }//GEN-LAST:event_formWindowOpened

    private void tblHocPhiMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tblHocPhiMaxActionPerformed
        loadSortedDataByHocPhi(true);
    }//GEN-LAST:event_tblHocPhiMaxActionPerformed

    private void tblHocPhiMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tblHocPhiMinActionPerformed
        loadSortedDataByHocPhi(false);
    }//GEN-LAST:event_tblHocPhiMinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChuyenDe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChuyenDe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChuyenDe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChuyenDe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChuyenDe chuyenDe = new ChuyenDe();
                chuyenDe.setVisible(true);
                chuyenDe.tabs.setSelectedIndex(0);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHinh;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblChuyenDe;
    private javax.swing.JButton tblHocPhiMax;
    private javax.swing.JButton tblHocPhiMin;
    private javax.swing.JTextField txtHocPhi;
    private javax.swing.JTextField txtMaCD;
    private javax.swing.JTextArea txtMota;
    private javax.swing.JTextField txtTenCD;
    private javax.swing.JTextField txtThoiLuong;
    // End of variables declaration//GEN-END:variables

    private static String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private static String url = "jdbc:sqlserver://localhost;databaseName=EduSys;encrypt=true;trustServerCertificate=true";
    private static String user = "sa";
    private static String password = "tranduynin";
    private int selectedRow = -1;

    private void loadDataIntoTable() {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {

            String query = "SELECT * FROM ChuyenDe";
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblChuyenDe.getModel();
            model.setRowCount(0); // Clear existing data

            while (resultSet.next()) {
                Object[] row = {
                    resultSet.getString("MaCD"),
                    resultSet.getString("TenCD"),
                    resultSet.getFloat("HocPhi"),
                    resultSet.getInt("ThoiLuong"),
                    resultSet.getString("Hinh")
                };
                model.addRow(row);
            }

            resultSet.close();
            statement.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();

        }
    }

    private void loadSortedDataByHocPhi(boolean ascending) {
        try (Connection conn = DriverManager.getConnection(url, user, password)) {

            String sortOrder = ascending ? "ASC" : "DESC";
            String query = "SELECT * FROM ChuyenDe ORDER BY HocPhi " + sortOrder;
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblChuyenDe.getModel();
            model.setRowCount(0); // Clear existing data

            while (resultSet.next()) {
                Object[] row = {
                    resultSet.getString("MaCD"),
                    resultSet.getString("TenCD"),
                    resultSet.getFloat("HocPhi"),
                    resultSet.getInt("ThoiLuong"),
                    resultSet.getString("Hinh")
                };
                model.addRow(row);
            }

            resultSet.close();
            statement.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void Them() {
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            String sql = "INSERT INTO ChuyenDe (MaCD, TenCD, HocPhi, ThoiLuong, Hinh, MoTa) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                // Truncate or trim MaCD value to fit into the column
                int maxLength = 50; // Change this to the actual length of the MaCD column
                String maCDValue = txtMaCD.getText().length() > maxLength
                        ? txtMaCD.getText().substring(0, maxLength)
                        : txtMaCD.getText();

                statement.setString(1, maCDValue);
                statement.setString(2, txtTenCD.getText());
                statement.setFloat(3, Float.parseFloat(txtHocPhi.getText()));
                statement.setInt(4, Integer.parseInt(txtThoiLuong.getText()));
                statement.setString(5, strHinhanh);
                statement.setString(6, txtMota.getText());

                int rowsInserted = statement.executeUpdate();
                if (rowsInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Thêm chuyên đề thành công!");
                    loadDataIntoTable(); // Refresh table
                    clearForm();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm chuyên đề thất bại!");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm chuyên đề vào cơ sở dữ liệu!\nLỗi: " + e.getMessage());
        }
    }

    private void showDetails() {
        String imagePath = "D:\\FPT polytechnic\\Anh Code\\img";
        int selectedRow = tblChuyenDe.getSelectedRow();

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblChuyenDe.getModel();
            String maCD = model.getValueAt(selectedRow, 0).toString();

            try (Connection connection = DriverManager.getConnection(url, user, password)) {
                String sql = "SELECT * FROM ChuyenDe WHERE MaCD = ?";
                try (PreparedStatement statement = connection.prepareStatement(sql)) {
                    statement.setString(1, maCD);

                    try (ResultSet resultSet = statement.executeQuery()) {
                        if (resultSet.next()) {
                            txtMaCD.setText(resultSet.getString("MaCD"));
                            txtTenCD.setText(resultSet.getString("TenCD"));
                            txtHocPhi.setText(resultSet.getString("HocPhi"));
                            txtThoiLuong.setText(resultSet.getString("ThoiLuong"));
                            strHinhanh = resultSet.getString("Hinh");  // Update column name here

                            String fullImagePath = imagePath + strHinhanh;
                            // Định dạng kích thước ảnh
                            ImageIcon originalIcon = new ImageIcon(fullImagePath);
                            Image originalImage = originalIcon.getImage();
                            Image scaledImage = originalImage.getScaledInstance(175, 150, Image.SCALE_SMOOTH);
                            ImageIcon scaledIcon = new ImageIcon(scaledImage);
                            lblHinh.setIcon(scaledIcon);
                            lblHinh.setText(null);

                            txtMota.setText(resultSet.getString("MoTa"));
                        }
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ cơ sở dữ liệu!\nLỗi: " + e.getMessage());
            }
        }
    }

    private void update() {
        String maCD = txtMaCD.getText();
        String tenCD = txtTenCD.getText();
        String hocPhiStr = txtHocPhi.getText();
        String thoiLuongStr = txtThoiLuong.getText();
        String moTa = txtMota.getText();

        if (maCD.isEmpty() || tenCD.isEmpty() || hocPhiStr.isEmpty() || thoiLuongStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin");
            return;
        }

        double hocPhi;
        int thoiLuong;

        try {
            hocPhi = Double.parseDouble(hocPhiStr);
            thoiLuong = Integer.parseInt(thoiLuongStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Học phí và thời lượng phải là số");
            return;
        }

        // Update image only if a new image is selected
        if (strHinhanh != null) {
            try (Connection connection = DriverManager.getConnection(url, user, password)) {
                String sql = "UPDATE ChuyenDe SET TenCD=?, HocPhi=?, ThoiLuong=?, Hinh=?, MoTa=? WHERE MaCD=?";
                try (PreparedStatement statement = connection.prepareStatement(sql)) {
                    statement.setString(1, tenCD);
                    statement.setDouble(2, hocPhi);
                    statement.setInt(3, thoiLuong);
                    statement.setString(4, strHinhanh);
                    statement.setString(5, moTa);
                    statement.setString(6, maCD);

                    int rowsAffected = statement.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "Cập nhật thành công");
                        loadDataIntoTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Không được đổi tên chủ đề");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật dữ liệu vào cơ sở dữ liệu!\nLỗi: " + e.getMessage());
                e.printStackTrace(); // In stack trace để xem chi tiết lỗi trong console
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hình ảnh mới");
        }
    }

    private void clearForm() {
        txtMaCD.setText("");
        txtTenCD.setText("");
        txtHocPhi.setText("");
        txtThoiLuong.setText("");
        lblHinh.setIcon(null);
        txtMota.setText("");
    }

    private void insert() {
        String maCD = txtMaCD.getText().trim();
        String tenCD = txtTenCD.getText().trim();
        String hocPhiText = txtHocPhi.getText().trim();
        String thoiLuongText = txtThoiLuong.getText().trim();
        String hinhAnh = strHinhanh; // Use the selected image file name
        String moTa = txtMota.getText().trim();

        if (maCD.isEmpty() || tenCD.isEmpty() || hocPhiText.isEmpty() || thoiLuongText.isEmpty() || hinhAnh.isEmpty() || moTa.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin.");
            return;
        }

        try {
            double hocPhi = Double.parseDouble(hocPhiText);
            int thoiLuong = Integer.parseInt(thoiLuongText);

            // Check if the record with the same MaCD already exists
            if (isMaCDExists(maCD)) {
                JOptionPane.showMessageDialog(this, "Chuyên đề với Mã chuyên đề đã tồn tại.");
                return;
            }

            try (Connection connection = DriverManager.getConnection(url, user, password)) {
                String sql = "INSERT INTO ChuyenDe (MaCD, TenCD, HocPhi, ThoiLuong, Hinh, MoTa) VALUES (?, ?, ?, ?, ?, ?)";
                try (PreparedStatement statement = connection.prepareStatement(sql)) {
                    statement.setString(1, maCD);
                    statement.setString(2, tenCD);
                    statement.setDouble(3, hocPhi);
                    statement.setInt(4, thoiLuong);
                    statement.setString(5, hinhAnh);
                    statement.setString(6, moTa);

                    int rowsInserted = statement.executeUpdate();
                    if (rowsInserted > 0) {
                        JOptionPane.showMessageDialog(this, "Thêm mới thành công.");
                        loadDataIntoTable(); // Reload the table with updated data
                        clearForm();
                    } else {
                        JOptionPane.showMessageDialog(this, "Thêm mới thất bại.");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi thêm mới dữ liệu!\nLỗi: " + e.getMessage());
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số cho Học Phí và Thời Lượng.");
        }
    }

    private void delete() {
        int selectedRow = tblChuyenDe.getSelectedRow();

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblChuyenDe.getModel();
            String maCD = model.getValueAt(selectedRow, 0).toString();

            // Check if the record with the specified MaCD exists
            if (!isMaCDExists(maCD)) {
                JOptionPane.showMessageDialog(this, "Chuyên đề với Mã chuyên đề không tồn tại.");
                return;
            }

            int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                try (Connection connection = DriverManager.getConnection(url, user, password)) {
                    String sql = "DELETE FROM ChuyenDe WHERE MaCD = ?";
                    try (PreparedStatement statement = connection.prepareStatement(sql)) {
                        statement.setString(1, maCD);

                        int rowsDeleted = statement.executeUpdate();
                        if (rowsDeleted > 0) {
                            JOptionPane.showMessageDialog(this, "Xóa thành công.");

                            if (model.getRowCount() > 0) {
                                // Move to the first row after deletion
                                tblChuyenDe.setRowSelectionInterval(0, 0);
                            }

                            loadDataIntoTable(); // Reload the table with updated data
                            clearForm();
                        } else {
                            JOptionPane.showMessageDialog(this, "Xóa thất bại.");
                        }
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Lỗi khi xóa dữ liệu!\nLỗi: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa.");
        }
    }

// Check if MaCD exists
    private boolean isMaCDExists(String maCD) {
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            String sql = "SELECT COUNT(*) FROM ChuyenDe WHERE MaCD = ?";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, maCD);

                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        return count > 0;
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra sự tồn tại của Mã chuyên đề!\nLỗi: " + e.getMessage());
        }
        return false;
    }

    private void Frist() {
        int rowCount = tblChuyenDe.getRowCount();
        if (rowCount > 0) {
            selectedRow = 0;
            tblChuyenDe.setRowSelectionInterval(selectedRow, selectedRow);
            showDetails();
        }
    }

    private void LastRow() {
        int lastRowIndex = tblChuyenDe.getRowCount() - 1;
        if (lastRowIndex >= 0) {
            tblChuyenDe.setRowSelectionInterval(lastRowIndex, lastRowIndex);
            showDetails();
        }
    }

    private void PreviousRow() {
        int selectedRowIndex = tblChuyenDe.getSelectedRow();
        if (selectedRowIndex > 0) {
            tblChuyenDe.setRowSelectionInterval(selectedRowIndex - 1, selectedRowIndex - 1);
            showDetails();
        }
    }

    private void NextRow() {
        int selectedRowIndex = tblChuyenDe.getSelectedRow();
        int lastRowIndex = tblChuyenDe.getRowCount() - 1;
        if (selectedRowIndex < lastRowIndex) {
            tblChuyenDe.setRowSelectionInterval(selectedRowIndex + 1, selectedRowIndex + 1);
            showDetails();
        }
    }
}

package poly.com.ui;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class KhoaHoc extends javax.swing.JDialog {

    /**
     * Creates new form KhoaHocJDialog
     */
    public KhoaHoc() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTenCD = new javax.swing.JLabel();
        txtNgayKG = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtHocPhi = new javax.swing.JTextField();
        txtThoiLuong = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        txtNgayTao = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKhoaHoc = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        cboChuyenDe = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EduSys - Quản lý khóa học");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel6.setText("Ghi chú");

        txtGhiChu.setColumns(20);
        txtGhiChu.setRows(5);
        jScrollPane2.setViewportView(txtGhiChu);

        jPanel4.setLayout(new java.awt.GridLayout(0, 2, 5, 5));

        jLabel1.setText("Chuyên đề");
        jPanel4.add(jLabel1);

        jLabel7.setText("Khai giảng");
        jPanel4.add(jLabel7);

        lblTenCD.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTenCD.setForeground(new java.awt.Color(255, 0, 0));
        lblTenCD.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        jPanel4.add(lblTenCD);
        jPanel4.add(txtNgayKG);

        jLabel2.setText("Học phí");
        jPanel4.add(jLabel2);

        jLabel8.setText("Thời lượng (giờ)");
        jPanel4.add(jLabel8);

        txtHocPhi.setEditable(false);
        txtHocPhi.setEnabled(false);
        jPanel4.add(txtHocPhi);

        txtThoiLuong.setEditable(false);
        txtThoiLuong.setEnabled(false);
        jPanel4.add(txtThoiLuong);

        jLabel9.setText("Người tạo");
        jPanel4.add(jLabel9);

        jLabel10.setText("Ngày tạo");
        jPanel4.add(jLabel10);

        txtMaNV.setEditable(false);
        txtMaNV.setEnabled(false);
        jPanel4.add(txtMaNV);

        txtNgayTao.setEditable(false);
        txtNgayTao.setEnabled(false);
        jPanel4.add(txtNgayTao);

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel5.add(btnSua);

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel5.add(btnXoa);

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        jPanel5.add(btnMoi);

        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel6.add(btnFirst);

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        jPanel6.add(btnPrev);

        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel6.add(btnNext);

        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel6.add(btnLast);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tabs.addTab("CẬP NHẬT", jPanel1);

        tblKhoaHoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ KH", "THỜI LƯỢNG", "HỌC PHÍ", "KHAI GIẢNG", "TẠO BỞI", "NGÀY TẠO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblKhoaHoc.setRowHeight(25);
        tblKhoaHoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKhoaHocMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKhoaHoc);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("DANH SÁCH", jPanel2);

        tabs.setSelectedIndex(1);

        getContentPane().add(tabs, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CHUYÊN ĐỀ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout(10, 10));

        cboChuyenDe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả" }));
        cboChuyenDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboChuyenDeActionPerformed(evt);
            }
        });
        jPanel3.add(cboChuyenDe, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int selectedRowIndex = tblKhoaHoc.getSelectedRow();

        // Check if any row is selected
        if (selectedRowIndex != -1) {
            // Retrieve data from the selected row
            String tenCD = tblKhoaHoc.getValueAt(selectedRowIndex, 0).toString();
            String ngayKG = txtNgayKG.getText();

            // Update the database with the new value of txtNgayKG
            updateNgayKGInDatabase(tenCD, ngayKG);

            // Reload data to update the table
            loadDataToTable();
            clear();
            // Display a message indicating success
            JOptionPane.showMessageDialog(this, "Cập nhật thành công!");

        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int selectedRowIndex = tblKhoaHoc.getSelectedRow();

        // Kiểm tra xem có hàng nào được chọn không
        if (selectedRowIndex != -1) {
            // Lấy dữ liệu từ hàng đã chọn
            String tenCD = tblKhoaHoc.getValueAt(selectedRowIndex, 0).toString();
            String ngayKG = tblKhoaHoc.getValueAt(selectedRowIndex, 3).toString();

            // Xác nhận việc xóa
            int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Gọi phương thức để xóa bản ghi từ cơ sở dữ liệu
                delete(tenCD, ngayKG);

                // Làm mới dữ liệu của bảng
                loadDataToTable();

                // Xóa các trường của biểu mẫu
                clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clear();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        Frist();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        int selectedRowIndex = tblKhoaHoc.getSelectedRow();
        if (selectedRowIndex > 0) {
            // Nếu có hàng được chọn và không phải là hàng đầu tiên
            int newRow = selectedRowIndex - 1;
            tblKhoaHoc.setRowSelectionInterval(newRow, newRow);
            tblKhoaHocMouseClicked(null);
        } else {
            JOptionPane.showMessageDialog(this, "Đây là hàng đầu tiên.");
        }
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        int selectedRowIndex = tblKhoaHoc.getSelectedRow();
        int lastRowIndex = tblKhoaHoc.getRowCount() - 1;

        if (selectedRowIndex < lastRowIndex && selectedRowIndex >= 0) {
            // Nếu có hàng được chọn và không phải là hàng cuối cùng
            int newRow = selectedRowIndex + 1;
            tblKhoaHoc.setRowSelectionInterval(newRow, newRow);
            tblKhoaHocMouseClicked(null);
        } else {
            JOptionPane.showMessageDialog(this, "Đây là hàng cuối cùng.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        int lastRowIndex = tblKhoaHoc.getRowCount() - 1;
        if (lastRowIndex >= 0) {
            // Nếu có ít nhất một hàng
            tblKhoaHoc.setRowSelectionInterval(lastRowIndex, lastRowIndex);
            tblKhoaHocMouseClicked(null);
        } else {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để hiển thị.");
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void tblKhoaHocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKhoaHocMouseClicked
        int selectedRowIndex = tblKhoaHoc.getSelectedRow();

        // Check if any row is selected
        if (selectedRowIndex != -1) {
            // Retrieve data from the selected row
            String tenCD = tblKhoaHoc.getValueAt(selectedRowIndex, 0).toString();
            int thoiLuong = Integer.parseInt(tblKhoaHoc.getValueAt(selectedRowIndex, 1).toString());
            double hocPhi = Double.parseDouble(tblKhoaHoc.getValueAt(selectedRowIndex, 2).toString());
            String ngayKG = tblKhoaHoc.getValueAt(selectedRowIndex, 3).toString();
            String maNV = tblKhoaHoc.getValueAt(selectedRowIndex, 4).toString();
            String ngayTao = tblKhoaHoc.getValueAt(selectedRowIndex, 5).toString();

            // Set the data to the form fields
            lblTenCD.setText(tenCD);
            txtThoiLuong.setText(String.valueOf(thoiLuong));
            txtHocPhi.setText(String.valueOf(hocPhi));
            txtNgayKG.setText(ngayKG);
            txtMaNV.setText(maNV);
            txtNgayTao.setText(ngayTao);

            // Retrieve GhiChu from the database based on the selected row's data
            loadGhiChuFromDatabase(tenCD, ngayKG);

            // Switch to the "CẬP NHẬT" tab
            tabs.setSelectedIndex(0);
        }
    }//GEN-LAST:event_tblKhoaHocMouseClicked

    private void cboChuyenDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboChuyenDeActionPerformed
        String selectedChuyenDe = cboChuyenDe.getSelectedItem().toString();
        if ("Tất cả".equals(selectedChuyenDe)) {
            cboChuyenDe.removeAllItems();
            cboChuyenDe.addItem("Tất cả");
            loadChuyenDeData();
            loadDataToTable();
        } else {
            loadDataBasedOnChuyenDe(selectedChuyenDe);
        }
    }//GEN-LAST:event_cboChuyenDeActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadDataToTable();
        loadChuyenDeData();
        Frist();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KhoaHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KhoaHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KhoaHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KhoaHoc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KhoaHoc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboChuyenDe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTenCD;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblKhoaHoc;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtHocPhi;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtNgayKG;
    private javax.swing.JTextField txtNgayTao;
    private javax.swing.JTextField txtThoiLuong;
    // End of variables declaration//GEN-END:variables

    private static String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    private static String url = "jdbc:sqlserver://localhost;databaseName=EduSys;encrypt=true;trustServerCertificate=true";
    private static String user = "sa";
    private static String password = "tranduynin";
    private int selectedRow = -1;

    private void loadDataToTable() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query
            String sql = "SELECT KHOAHOC.*, CHUYENDE.TenCD "
                    + "FROM KHOAHOC "
                    + "JOIN CHUYENDE ON KHOAHOC.MaCD = CHUYENDE.MaCD";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);

            // Execute the query and obtain the result set
            rs = pstmt.executeQuery();

            // Populate the tblKhoaHoc table with data from the result set
            DefaultTableModel model = (DefaultTableModel) tblKhoaHoc.getModel();
            model.setRowCount(0);  // Clear existing data in the table

            while (rs.next()) {

                String tenCD = rs.getString("TenCD");
                int thoiLuong = rs.getInt("ThoiLuong");
                double hocPhi = rs.getDouble("HocPhi");
                String ngayKG = rs.getString("NgayKG");
                String maNV = rs.getString("MaNV");
                String ngayTao = rs.getString("NgayTao");

                // Add a new row to the table model
                model.addRow(new Object[]{tenCD, thoiLuong, hocPhi, ngayKG, maNV, ngayTao});
            }
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadChuyenDeData() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query to fetch distinct values from CHUYENDE table
            String sql = "SELECT DISTINCT TenCD FROM CHUYENDE";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);

            // Execute the query and obtain the result set
            rs = pstmt.executeQuery();

            // Populate the cboChuyenDe combo box with data from the result set
            while (rs.next()) {
                String tenCD = rs.getString("TenCD");
                cboChuyenDe.addItem(tenCD);
            }
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadDataBasedOnChuyenDe(String chuyenDe) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query with a condition based on the selected chuyen de
            String sql = "SELECT KHOAHOC.*, CHUYENDE.TenCD "
                    + "FROM KHOAHOC "
                    + "JOIN CHUYENDE ON KHOAHOC.MaCD = CHUYENDE.MaCD "
                    + "WHERE CHUYENDE.TenCD = ?";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, chuyenDe);

            // Execute the query and obtain the result set
            rs = pstmt.executeQuery();

            // Populate the tblKhoaHoc table with data from the result set
            DefaultTableModel model = (DefaultTableModel) tblKhoaHoc.getModel();
            model.setRowCount(0);  // Clear existing data in the table

            while (rs.next()) {
                String tenCD = rs.getString("TenCD");
                int thoiLuong = rs.getInt("ThoiLuong");
                double hocPhi = rs.getDouble("HocPhi");
                String ngayKG = rs.getString("NgayKG");
                String maNV = rs.getString("MaNV");
                String ngayTao = rs.getString("NgayTao");

                // Add a new row to the table model
                model.addRow(new Object[]{tenCD, thoiLuong, hocPhi, ngayKG, maNV, ngayTao});
            }
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadGhiChuFromDatabase(String tenCD, String ngayKG) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query to retrieve GhiChu based on the selected row's data
            String sql = "SELECT GhiChu FROM KHOAHOC "
                    + "JOIN CHUYENDE ON KHOAHOC.MaCD = CHUYENDE.MaCD "
                    + "WHERE CHUYENDE.TenCD = ? AND KHOAHOC.NgayKG = ?";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, tenCD);
            pstmt.setString(2, ngayKG);

            // Execute the query and obtain the result set
            rs = pstmt.executeQuery();

            // Populate the txtGhiChu field with data from the result set
            if (rs.next()) {
                String ghiChu = rs.getString("GhiChu");
                txtGhiChu.setText(ghiChu);
            }
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updateNgayKGInDatabase(String tenCD, String ngayKG) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query to update the NgayKG column
            String sql = "UPDATE KHOAHOC SET NgayKG = ? WHERE MaCD = (SELECT MaCD FROM CHUYENDE WHERE TenCD = ?)";

            // Log the SQL query
            System.out.println("SQL Query: " + sql);

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, ngayKG);
            pstmt.setString(2, tenCD);

            // Log the parameters
            System.out.println("Parameters: NgayKG=" + ngayKG + ", TenCD=" + tenCD);

            // Execute the update
            int rowsAffected = pstmt.executeUpdate();

            // Log the number of rows affected
            System.out.println("Rows affected: " + rowsAffected);
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void clear() {
        // Clear all form fields after adding a new record
        lblTenCD.setText("");
        txtThoiLuong.setText("");
        txtHocPhi.setText("");
        txtNgayKG.setText("");
        txtMaNV.setText("");
        txtNgayTao.setText("");
        txtGhiChu.setText("");
    }

    private void delete(String tenCD, String ngayKG) {
        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            // Establish a database connection
            conn = DriverManager.getConnection(url, user, password);

            // Create SQL query to delete a row from KHOAHOC
            String sql = "DELETE FROM KHOAHOC WHERE MaCD = (SELECT MaCD FROM CHUYENDE WHERE TenCD = ?) AND NgayKG = ?";

            // Log the SQL query
            System.out.println("SQL Query: " + sql);

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, tenCD);
            pstmt.setString(2, ngayKG);

            // Log the parameters
            System.out.println("Parameters: TenCD=" + tenCD + ", NgayKG=" + ngayKG);

            // Execute the delete
            int rowsAffected = pstmt.executeUpdate();

            // Log the number of rows affected
            System.out.println("Rows affected: " + rowsAffected);
        } catch (SQLException ex) {
            Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            // Close the resources
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(KhoaHoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void Frist() {
        if (tblKhoaHoc.getRowCount() > 0) {
            // Chuyển đến hàng đầu tiên
            tblKhoaHoc.setRowSelectionInterval(0, 0);

            // Gọi sự kiện khi một hàng được chọn (tblKhoaHocMouseClicked)
            tblKhoaHocMouseClicked(null);
        } else {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu để hiển thị.");
        }

    }

}
